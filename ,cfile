#!/usr/bin/env python3

"""Generates a template of a basic C file, as per the
ALX "Betty" program requirements."""

import os
import sys
import subprocess
from textwrap import dedent

if not (2 <= len(sys.argv) <= 4):
    sys.exit('usage: ,cfile <mainargs> <name of c file>.c <function signature>')

arrows = '======>'

def main():
	arg = sys.argv[1]
	if arg == 'mainargs':
		file = sys.argv[2]
		template = get_main_with_args()
		write_template(file, template)
		edit_run_betty(file)
		sys.exit()

	signature = sys.argv[2] if len(sys.argv) == 3 else None

	file = sys.argv[1]
	# don't compile main.h
	if file == "main.h":
		# allow editing, and do a betty check afterwards
		edit_run_betty(file)
		print()
		sys.exit()

	# Run Betty on the file, and compile if it already exists
	if os.path.exists(file):
		# allow editing, and do a betty check afterwards
		edit_run_betty(file)
		print()
		print(f'{arrows} Compiling, and running your code with gcc ...')
		print()
		subprocess.run(f'gcc -Wall -Werror -Wextra -pedantic -std=gnu89 {file} && ./a.out', shell=True)
		sys.exit()
	
	if signature:
		template = get_func_template(signature)
	else:
		template = get_main_template()

	# write the template to the requested file
	write_template(file, template)

	edit_run_betty(file)
	sys.exit()


def get_func_template(signature):
	# extract return type, function name and arguments portion
	ret_func_name, partial_args = signature.split('(')
	ret_val, func = ret_func_name.split(' ')
	args = '(' + partial_args
	placeholder = """{
	...
}
	"""	
	template = f"""#include "main.h"

/**
 * {func} - Short desc
 * @parameter: Description
 * Description: Long desc
 * Return: ...
 */
{ret_val} {func} {args.rstrip(';')}
{placeholder}
	"""

	return dedent(template)


def get_main_template():
	return_line = """
{
	return (0);
}
""".strip()

	template = f"""#include <stdio.h>

/**
 * main - Entry point.
 * Description: The main entry point of the program.
 * Return: 0 if successful, Non-zero otherwise.
 */
int main(void)
{return_line}

"""

	return dedent(template)


def get_main_with_args():
	return_line = """
{
	return (0);
}
""".strip()

	template = f"""#include <stdio.h>

/**
 * main - Entry point.
 * @argc: Length of array of commandline arguments.
 * @argv: Array of commandline arguments.
 * Description: The main entry point of the program.
 * Return: 0 if successful, Non-zero otherwise.
 */
int main(__attribute__((unused)) int argc, char *argv[])
{return_line}

"""

	return dedent(template)

def write_template(file, template):
	# write the template to the requested file
	with open(file, 'w', encoding='utf-8') as f:
		f.write(template)

def edit_run_betty(file):
	# allow editing, do a Betty check, and compile
	subprocess.run(f'vim {file}', shell=True)
	print(f'{arrows} Running Betty on your code ...')
	subprocess.run(f'betty {file}', shell=True)
	# subprocess.run(f'gcc -Wall -Werror -Wextra -pedantic -std=gnu89 {file} && ./a.out', shell=True)

if __name__ == '__main__':
	main()
