#!/usr/bin/env python3

"""Generates a template of a basic C file, as per the
ALX "Betty" program requirements."""

import os
import sys
import subprocess
from textwrap import dedent
import argparse

parser = argparse.ArgumentParser(allow_abbrev=False)
parser.add_argument('file', help='The c file to create')
parser.add_argument('-p', '--prototype',
					help='Adds a function prototype to the c file')
parser.add_argument('-b', '--betty', action='store_true',
					help='Runs the ALX SE betty style checker on the c file')
parser.add_argument('-e', '--edit', action='store_true',
					help='Opens the file in vim text editor')
parser.add_argument('-d', '--desc', type=str,
					help='Adds a description of the function prototype')
parser.add_argument('--header',
					help='The header file to include in the c file')
mains = parser.add_mutually_exclusive_group()
mains.add_argument('--args', action='store_true',
					help='Adds a standard argv, argc prototype of main')
mains.add_argument('--void', action='store_true',
					help='Adds a standard void prototype of main')
args = parser.parse_args()
file = args.file

prototype = args.prototype if args.prototype else None
# mains versions
main_standard = args.args if args.args else None
main_void = args.void if args.void else None

edit = args.edit if args.edit else None
betty = args.betty if args.betty else None
desc = args.desc if args.desc else 'Description'
header = f'#include "{args.header.split(".")[0]}.h"\n' if args.header else ''
arrows = '======>'

def main():
    # Confirm overwrite
    if Path.exists(Path(file)):
        while True:
            message = dedent(f"""
            `{file}` already exists.
            Do you want to create a new one? (y/n): """).lstrip()
            response = input(message).strip().lower()
            if response not in ('y', 'n'):
                continue
            if response == 'n':
                message = dedent(f"""
                Process aborted!.
                `{file}` file is intact.
                Goodbye!""").lstrip()
                sys.exit(message)
            else:
                break
    process_file(file)


def process_file(file):
    if main_standard:
        template = get_main_with_args()
        write_template(file, template)
        edit_betty(file, edit=edit, betty=betty)
        sys.exit()

    if main_void:
        template = get_main_void()
        write_template(file, template)
        edit_betty(file, edit=edit, betty=betty)
        sys.exit()

    if prototype:
        template = get_func_template(prototype)
    # write the template to the requested file
    write_template(file, template)
    edit_betty(file, edit=edit, betty=betty)
    sys.exit()
    else:
        # write a main_void template by default
        template = get_main_void()
        write_template(file, template)


def get_func_parts(prototype):
    args = []
    before, _, after = prototype.partition('(')
    return_type = ' '.join(before.split(' ')[:-1])
    name = before.split(' ')[-1]
    num_stars = name.count('*')

    if num_stars > 0:
        # attach pointer stars to the return type
        return_type = f"{return_type} {'*' * num_stars}"

    name = name.lstrip('*')  # strip any pointer stars from the actual name
    arguments = after.rstrip(');').split(',')

    for arg in arguments:
        # strip pointer stars and square brackets from arguments
        arg = arg.split(' ')[-1].lstrip('**').rstrip('[]')
        if not arg == 'void':
            args.append(arg)
    return return_type, name, args


def get_func_template(prot: str) -> Tuple:
    # extract return type, function name and arguments portion
    args_docs = []
    ret_val, func, args = get_func_parts(prot)

    for idx, arg in enumerate(args, start=1):
        args_docs.append(f'    * @{arg}: ')
        if idx < len(args):
            args_docs.append('\n')

    placeholder = """{
        /* TODO */
    }
    """
    template = dedent(f"""  
    {header}
    /**
    * {func} - {desc}
    {''.join(args_docs)}
    * Description: {desc}
    * Return: ...
    */
    {prototype.rstrip(';')}
    {placeholder}""").lstrip()

    return (template)


def get_main_void():
    return_line = """
    {
        return (0);
    }
    """.strip()

    template = dedent(f"""    #include <stdio.h>
    {header}
    /**
    * main - Entry point.
    * Description: The main entry point of the program.
    * Return: 0 if successful, Non-zero otherwise.
    */
    int main(void)
    {return_line}

    """)

    return dedent(template)


def get_main_with_args():
    return_line = """
    {
        return (0);
    }
    """.strip()

    template = dedent(f"""    #include <stdio.h>
    {header}
    /**
    * main - Entry point.
    * @argc: Length of array of commandline arguments.
    * @argv: Array of commandline arguments.
    * Description: The main entry point of the program.
    * Return: 0 if successful, Non-zero otherwise.
    */
    int main(int argc, char *argv[])
    {return_line}

    """)

    return dedent(template)


def write_template(file, template):
    # write the template to the requested file
    with open(file, 'w', encoding='utf-8') as f:
        f.write(template)
    print(f'`{file}` written to successfully!')


def edit_betty(file, edit=False, betty=False):
    # allow editing, do a Betty check, and compile
    if edit:
        subprocess.run(f'vim {file}', shell=True)
    if betty:
        print(f'{arrows} Running Betty on your code ...')
        subprocess.run(f'betty {file}', shell=True)

if __name__ == '__main__':
    main()
