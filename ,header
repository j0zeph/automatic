#!/usr/bin/env python3

import sys
import subprocess
from textwrap import dedent
from pathlib import Path
import argparse

parser = argparse.ArgumentParser()
parser.add_argument('file', help='The name of the header file')
parser.add_argument('-p', '--proto',
                    help='The function prototype to add to the header file')
parser.add_argument('-d', '--desc',
                    help='The description to add to the function prototype')
parser.add_argument('-n', '--new', action='store_true',
                    help='Creates a new header file')
args = parser.parse_args()


# add the .h extension to the end of the file
file = f'{args.file}'.split('.')[0] + '.h'
prototype = args.proto if args.proto else ''
desc = args.desc if args.desc else None
new = args.new if args.new else None

def main():
    if new and check_overwrite(file):
        make_new()
    if prototype and not Path(file).exists():
        while(1):
            message = f"""`{file}` does not exist.\nCreate it? (y/n): """
            response = input(message).lower().strip()
            if response not in ('y', 'n'):
                continue
            elif response.startswith('n'):
                sys.exit(f'`{file}` not created. Bye!')
            else:
                break
        make_new(prototype, desc)

    if prototype:
        append_function(prototype, desc)

def check_overwrite(header_file):
    if Path(header_file).exists():
        while (1):
            response = input(f'`{file}` already exists\
                        \nOverwrite it? (y/n): ').lower().strip()
            if response not in ('y', 'n'):
                continue
            elif response.startswith('n'):
                sys.exit(f'No changes were made to `{file}`. Bye!')
            else:
                break
    return 1

def make_new(prototype='', desc=''):
    # write the guards into the file
    subprocess.run(['touch', f'{file}'])
    guard_name = file.rstrip('.h').upper()+'_HEADER'
    if desc:
        desc = f'\n/* {desc} */'
    content = dedent(f"""
    #ifndef {guard_name}
    #define {guard_name}
    {desc}
    {prototype}
    #endif
    """).strip()

    with open(file, 'w', encoding='utf-8') as f:
        f.write(content)
    print(f'New `{file}` written')
    sys.exit(0)

def append_function(prototype, desc):
    lines = []

    with open(file, 'r', encoding='utf-8') as f:
        lines = f.readlines()

    # add description, prototype, with additional new lines if necessary
    last_line = lines.pop()
    if lines[-1].startswith('#endif'):
        lines.append('\n')
    if desc:
        lines.append(f'/* {desc} */\n')
    lines.append(f'{prototype}\n\n')
    lines.append(last_line)

    # write new content to 'main.h'
    with open(file, 'w', encoding='utf-8') as f:
        f.writelines(lines)

if __name__ == '__main__':
     main()
